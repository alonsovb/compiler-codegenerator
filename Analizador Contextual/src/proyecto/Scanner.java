/* The following code was generated by JFlex 1.4.3 on 16/05/12 02:05 PM */

package proyecto;

import java_cup.runtime.*;

/**
 * Scanner para la gramatica de prueba del curso de Compiladores e Interpretes.
 */

class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\0\1\3\1\1\16\7\4\0\1\3\1\63"+
    "\1\44\1\0\1\6\1\0\1\62\1\0\1\56\1\57\1\5\1\46"+
    "\1\61\1\47\1\42\1\4\1\10\11\11\1\64\1\60\1\50\1\45"+
    "\1\51\2\0\1\6\1\36\20\6\1\30\7\6\1\54\1\65\1\55"+
    "\1\0\1\6\1\0\1\14\1\20\1\12\1\25\1\33\1\37\1\32"+
    "\1\35\1\21\1\6\1\43\1\13\1\26\1\27\1\24\1\16\1\6"+
    "\1\31\1\15\1\22\1\17\1\23\1\40\1\34\1\41\1\6\1\52"+
    "\1\0\1\53\1\0\41\7\2\0\4\6\4\0\1\6\2\0\1\7"+
    "\7\0\1\6\4\0\1\6\5\0\27\6\1\0\37\6\1\0\u013f\6"+
    "\31\0\162\6\4\0\14\6\16\0\5\6\11\0\1\6\21\0\130\7"+
    "\5\0\23\7\12\0\1\6\13\0\1\6\1\0\3\6\1\0\1\6"+
    "\1\0\24\6\1\0\54\6\1\0\46\6\1\0\5\6\4\0\202\6"+
    "\1\0\4\7\3\0\105\6\1\0\46\6\2\0\2\6\6\0\20\6"+
    "\41\0\46\6\2\0\1\6\7\0\47\6\11\0\21\7\1\0\27\7"+
    "\1\0\3\7\1\0\1\7\1\0\2\7\1\0\1\7\13\0\33\6"+
    "\5\0\3\6\15\0\4\7\14\0\6\7\13\0\32\6\5\0\13\6"+
    "\16\7\7\0\12\7\4\0\2\6\1\7\143\6\1\0\1\6\10\7"+
    "\1\0\6\7\2\6\2\7\1\0\4\7\2\6\12\7\3\6\2\0"+
    "\1\6\17\0\1\7\1\6\1\7\36\6\33\7\2\0\3\6\60\0"+
    "\46\6\13\7\1\6\u014f\0\3\7\66\6\2\0\1\7\1\6\20\7"+
    "\2\0\1\6\4\7\3\0\12\6\2\7\2\0\12\7\21\0\3\7"+
    "\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0\1\6"+
    "\3\0\4\6\2\0\1\7\1\6\7\7\2\0\2\7\2\0\3\7"+
    "\11\0\1\7\4\0\2\6\1\0\3\6\2\7\2\0\12\7\4\6"+
    "\15\0\3\7\1\0\6\6\4\0\2\6\2\0\26\6\1\0\7\6"+
    "\1\0\2\6\1\0\2\6\1\0\2\6\2\0\1\7\1\0\5\7"+
    "\4\0\2\7\2\0\3\7\13\0\4\6\1\0\1\6\7\0\14\7"+
    "\3\6\14\0\3\7\1\0\11\6\1\0\3\6\1\0\26\6\1\0"+
    "\7\6\1\0\2\6\1\0\5\6\2\0\1\7\1\6\10\7\1\0"+
    "\3\7\1\0\3\7\2\0\1\6\17\0\2\6\2\7\2\0\12\7"+
    "\1\0\1\6\17\0\3\7\1\0\10\6\2\0\2\6\2\0\26\6"+
    "\1\0\7\6\1\0\2\6\1\0\5\6\2\0\1\7\1\6\6\7"+
    "\3\0\2\7\2\0\3\7\10\0\2\7\4\0\2\6\1\0\3\6"+
    "\4\0\12\7\1\0\1\6\20\0\1\7\1\6\1\0\6\6\3\0"+
    "\3\6\1\0\4\6\3\0\2\6\1\0\1\6\1\0\2\6\3\0"+
    "\2\6\3\0\3\6\3\0\10\6\1\0\3\6\4\0\5\7\3\0"+
    "\3\7\1\0\4\7\11\0\1\7\17\0\11\7\11\0\1\6\7\0"+
    "\3\7\1\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0"+
    "\5\6\4\0\7\7\1\0\3\7\1\0\4\7\7\0\2\7\11\0"+
    "\2\6\4\0\12\7\22\0\2\7\1\0\10\6\1\0\3\6\1\0"+
    "\27\6\1\0\12\6\1\0\5\6\2\0\1\7\1\6\7\7\1\0"+
    "\3\7\1\0\4\7\7\0\2\7\7\0\1\6\1\0\2\6\4\0"+
    "\12\7\22\0\2\7\1\0\10\6\1\0\3\6\1\0\27\6\1\0"+
    "\20\6\4\0\6\7\2\0\3\7\1\0\4\7\11\0\1\7\10\0"+
    "\2\6\4\0\12\7\22\0\2\7\1\0\22\6\3\0\30\6\1\0"+
    "\11\6\1\0\1\6\2\0\7\6\3\0\1\7\4\0\6\7\1\0"+
    "\1\7\1\0\10\7\22\0\2\7\15\0\60\6\1\7\2\6\7\7"+
    "\4\0\10\6\10\7\1\0\12\7\47\0\2\6\1\0\1\6\2\0"+
    "\2\6\1\0\1\6\2\0\1\6\6\0\4\6\1\0\7\6\1\0"+
    "\3\6\1\0\1\6\1\0\1\6\2\0\2\6\1\0\4\6\1\7"+
    "\2\6\6\7\1\0\2\7\1\6\2\0\5\6\1\0\1\6\1\0"+
    "\6\7\2\0\12\7\2\0\2\6\42\0\1\6\27\0\2\7\6\0"+
    "\12\7\13\0\1\7\1\0\1\7\1\0\1\7\4\0\2\7\10\6"+
    "\1\0\42\6\6\0\24\7\1\0\2\7\4\6\4\0\10\7\1\0"+
    "\44\7\11\0\1\7\71\0\42\6\1\0\5\6\1\0\2\6\1\0"+
    "\7\7\3\0\4\7\6\0\12\7\6\0\6\6\4\7\106\0\46\6"+
    "\12\0\51\6\7\0\132\6\5\0\104\6\5\0\122\6\6\0\7\6"+
    "\1\0\77\6\1\0\1\6\1\0\4\6\2\0\7\6\1\0\1\6"+
    "\1\0\4\6\2\0\47\6\1\0\1\6\1\0\4\6\2\0\37\6"+
    "\1\0\1\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6"+
    "\2\0\7\6\1\0\7\6\1\0\27\6\1\0\37\6\1\0\1\6"+
    "\1\0\4\6\2\0\7\6\1\0\47\6\1\0\23\6\16\0\11\7"+
    "\56\0\125\6\14\0\u026c\6\2\0\10\6\12\0\32\6\5\0\113\6"+
    "\3\0\3\6\17\0\15\6\1\0\4\6\3\7\13\0\22\6\3\7"+
    "\13\0\22\6\2\7\14\0\15\6\1\0\3\6\1\0\2\7\14\0"+
    "\64\6\40\7\3\0\1\6\3\0\2\6\1\7\2\0\12\7\41\0"+
    "\3\7\2\0\12\7\6\0\130\6\10\0\51\6\1\7\126\0\35\6"+
    "\3\0\14\7\4\0\14\7\12\0\12\7\36\6\2\0\5\6\u038b\0"+
    "\154\6\224\0\234\6\4\0\132\6\6\0\26\6\2\0\6\6\2\0"+
    "\46\6\2\0\6\6\2\0\10\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\37\6\2\0\65\6\1\0\7\6\1\0\1\6\3\0"+
    "\3\6\1\0\7\6\3\0\4\6\2\0\6\6\4\0\15\6\5\0"+
    "\3\6\1\0\7\6\17\0\4\7\32\0\5\7\20\0\2\6\23\0"+
    "\1\6\13\0\4\7\6\0\6\7\1\0\1\6\15\0\1\6\40\0"+
    "\22\6\36\0\15\7\4\0\1\7\3\0\6\7\27\0\1\6\4\0"+
    "\1\6\2\0\12\6\1\0\1\6\3\0\5\6\6\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\1\0\3\6\1\0\7\6\3\0"+
    "\3\6\5\0\5\6\26\0\44\6\u0e81\0\3\6\31\0\11\6\6\7"+
    "\1\0\5\6\2\0\5\6\4\0\126\6\2\0\2\7\2\0\3\6"+
    "\1\0\137\6\5\0\50\6\4\0\136\6\21\0\30\6\70\0\20\6"+
    "\u0200\0\u19b6\6\112\0\u51a6\6\132\0\u048d\6\u0773\0\u2ba4\6\u215c\0\u012e\6"+
    "\2\0\73\6\225\0\7\6\14\0\5\6\5\0\1\6\1\7\12\6"+
    "\1\0\15\6\1\0\5\6\1\0\1\6\1\0\2\6\1\0\2\6"+
    "\1\0\154\6\41\0\u016b\6\22\0\100\6\2\0\66\6\50\0\15\6"+
    "\3\0\20\7\20\0\4\7\17\0\2\6\30\0\3\6\31\0\1\6"+
    "\6\0\5\6\1\0\207\6\2\0\1\7\4\0\1\6\13\0\12\7"+
    "\7\0\32\6\4\0\1\6\1\0\32\6\12\0\132\6\3\0\6\6"+
    "\2\0\6\6\2\0\6\6\2\0\3\6\3\0\2\6\3\0\2\6"+
    "\22\0\3\7\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\5\2\6\21\5"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\1"+
    "\1\26\1\27\1\30\1\31\1\32\2\0\11\5\1\33"+
    "\16\5\1\34\1\35\1\36\1\37\1\40\2\0\10\5"+
    "\1\41\5\5\1\42\10\5\1\0\1\2\1\5\1\43"+
    "\1\44\5\5\1\45\1\46\1\47\1\5\1\50\3\5"+
    "\1\51\4\5\1\52\4\5\1\53\6\5\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\5\1\62\1\5\1\63"+
    "\2\5\1\64\1\0\1\65\1\66\12\0\1\67";

  private static int [] zzUnpackAction() {
    int [] result = new int[166];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\154\0\330\0\154\0\u010e"+
    "\0\154\0\u0144\0\u017a\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288"+
    "\0\u02be\0\u02f4\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438"+
    "\0\u046e\0\u04a4\0\u04da\0\154\0\154\0\154\0\154\0\154"+
    "\0\154\0\154\0\154\0\154\0\154\0\154\0\154\0\154"+
    "\0\154\0\154\0\u0510\0\154\0\154\0\u0546\0\154\0\u057c"+
    "\0\u05b2\0\u05e8\0\u061e\0\u0654\0\u068a\0\u06c0\0\u06f6\0\u072c"+
    "\0\u0762\0\u0798\0\u07ce\0\u010e\0\u0804\0\u083a\0\u0870\0\u08a6"+
    "\0\u08dc\0\u0912\0\u0948\0\u097e\0\u09b4\0\u09ea\0\u0a20\0\u0a56"+
    "\0\u0a8c\0\u0ac2\0\154\0\154\0\154\0\154\0\154\0\u0af8"+
    "\0\u0b2e\0\u0b64\0\u0b9a\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72\0\u0ca8"+
    "\0\u0cde\0\u010e\0\u0d14\0\u0d4a\0\u0d80\0\u0db6\0\u0dec\0\u010e"+
    "\0\u0e22\0\u0e58\0\u0e8e\0\u0ec4\0\u0efa\0\u0f30\0\u0f66\0\u0f9c"+
    "\0\u0fd2\0\u0af8\0\u1008\0\u010e\0\u010e\0\u103e\0\u1074\0\u10aa"+
    "\0\u10e0\0\u1116\0\u010e\0\u010e\0\u010e\0\u114c\0\u010e\0\u1182"+
    "\0\u11b8\0\u11ee\0\u010e\0\u1224\0\u125a\0\u1290\0\u12c6\0\u010e"+
    "\0\u12fc\0\u1332\0\u1368\0\u139e\0\u010e\0\u13d4\0\u140a\0\u1440"+
    "\0\u1476\0\u14ac\0\u14e2\0\u010e\0\u010e\0\u010e\0\u010e\0\u010e"+
    "\0\u010e\0\u1518\0\u010e\0\u154e\0\u010e\0\u1584\0\u15ba\0\u010e"+
    "\0\u15f0\0\u010e\0\u010e\0\u1626\0\u165c\0\u1692\0\u16c8\0\u16fe"+
    "\0\u1734\0\u176a\0\u17a0\0\u17d6\0\u180c\0\154";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[166];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\1\6\1\7\1\10\1\3\1\11"+
    "\1\12\1\13\1\14\1\10\1\15\1\16\1\10\1\17"+
    "\1\20\1\21\1\22\1\10\1\23\1\24\1\25\1\26"+
    "\1\27\1\10\1\30\2\10\1\31\1\32\1\33\1\10"+
    "\1\34\1\10\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\3\1\56\2\3\41\56\1\57"+
    "\20\56\1\60\70\0\1\5\67\0\1\61\1\62\66\0"+
    "\34\10\1\0\1\10\32\0\2\12\62\0\5\10\1\63"+
    "\1\64\20\10\1\65\4\10\1\0\1\10\30\0\25\10"+
    "\1\66\6\10\1\0\1\10\30\0\14\10\1\67\15\10"+
    "\1\70\1\10\1\0\1\10\30\0\11\10\1\71\22\10"+
    "\1\0\1\10\30\0\23\10\1\72\10\10\1\0\1\10"+
    "\30\0\21\10\1\73\7\10\1\74\2\10\1\0\1\10"+
    "\30\0\23\10\1\75\3\10\1\76\4\10\1\0\1\10"+
    "\30\0\16\10\1\77\15\10\1\0\1\10\30\0\25\10"+
    "\1\100\6\10\1\0\1\10\30\0\6\10\1\101\25\10"+
    "\1\0\1\10\30\0\25\10\1\102\6\10\1\0\1\10"+
    "\30\0\14\10\1\103\16\10\1\104\1\0\1\10\30\0"+
    "\25\10\1\105\6\10\1\0\1\10\30\0\5\10\1\106"+
    "\20\10\1\107\5\10\1\0\1\10\30\0\16\10\1\110"+
    "\15\10\1\0\1\10\30\0\6\10\1\111\25\10\1\0"+
    "\1\10\30\0\27\10\1\112\4\10\1\0\1\10\104\0"+
    "\1\113\3\0\1\56\2\0\41\56\1\0\20\56\23\0"+
    "\1\114\4\0\1\115\1\0\1\116\12\0\1\117\21\0"+
    "\1\61\1\4\1\5\63\61\5\120\1\121\60\120\6\0"+
    "\6\10\1\122\25\10\1\0\1\10\30\0\7\10\1\123"+
    "\24\10\1\0\1\10\30\0\6\10\1\124\25\10\1\0"+
    "\1\10\30\0\21\10\1\125\12\10\1\0\1\10\30\0"+
    "\6\10\1\126\25\10\1\0\1\10\30\0\13\10\1\127"+
    "\20\10\1\0\1\10\30\0\12\10\1\130\21\10\1\0"+
    "\1\10\30\0\25\10\1\131\6\10\1\0\1\10\30\0"+
    "\14\10\1\132\17\10\1\0\1\10\30\0\11\10\1\133"+
    "\22\10\1\0\1\10\30\0\13\10\1\134\20\10\1\0"+
    "\1\10\30\0\13\10\1\135\20\10\1\0\1\10\30\0"+
    "\31\10\1\136\2\10\1\0\1\10\30\0\13\10\1\137"+
    "\20\10\1\0\1\10\30\0\32\10\1\140\1\10\1\0"+
    "\1\10\30\0\23\10\1\141\10\10\1\0\1\10\30\0"+
    "\7\10\1\142\24\10\1\0\1\10\30\0\14\10\1\143"+
    "\17\10\1\0\1\10\30\0\7\10\1\144\24\10\1\0"+
    "\1\10\30\0\14\10\1\145\17\10\1\0\1\10\30\0"+
    "\16\10\1\146\15\10\1\0\1\10\30\0\5\10\1\147"+
    "\26\10\1\0\1\10\30\0\13\10\1\150\20\10\1\0"+
    "\1\10\22\0\5\120\1\151\64\120\1\152\1\151\60\120"+
    "\6\0\7\10\1\153\24\10\1\0\1\10\30\0\25\10"+
    "\1\154\6\10\1\0\1\10\30\0\23\10\1\155\10\10"+
    "\1\0\1\10\30\0\24\10\1\156\7\10\1\0\1\10"+
    "\30\0\14\10\1\157\17\10\1\0\1\10\30\0\14\10"+
    "\1\160\17\10\1\0\1\10\30\0\5\10\1\161\26\10"+
    "\1\0\1\10\30\0\6\10\1\162\25\10\1\0\1\10"+
    "\30\0\25\10\1\163\6\10\1\0\1\10\30\0\7\10"+
    "\1\164\24\10\1\0\1\10\30\0\17\10\1\165\14\10"+
    "\1\0\1\10\30\0\6\10\1\166\25\10\1\0\1\10"+
    "\30\0\21\10\1\167\12\10\1\0\1\10\30\0\13\10"+
    "\1\170\20\10\1\0\1\10\30\0\14\10\1\171\17\10"+
    "\1\0\1\10\30\0\11\10\1\172\22\10\1\0\1\10"+
    "\30\0\25\10\1\173\6\10\1\0\1\10\30\0\25\10"+
    "\1\174\6\10\1\0\1\10\30\0\5\10\1\175\26\10"+
    "\1\0\1\10\30\0\7\10\1\176\24\10\1\0\1\10"+
    "\30\0\5\10\1\177\26\10\1\0\1\10\22\0\4\120"+
    "\1\5\1\151\60\120\6\0\7\10\1\200\24\10\1\0"+
    "\1\10\30\0\27\10\1\201\4\10\1\0\1\10\30\0"+
    "\13\10\1\202\20\10\1\0\1\10\30\0\4\10\1\203"+
    "\27\10\1\0\1\10\30\0\13\10\1\204\20\10\1\0"+
    "\1\10\30\0\34\10\1\0\1\205\30\0\11\10\1\206"+
    "\22\10\1\0\1\10\30\0\21\10\1\207\12\10\1\0"+
    "\1\10\30\0\25\10\1\210\6\10\1\0\1\10\30\0"+
    "\23\10\1\211\10\10\1\0\1\10\30\0\21\10\1\212"+
    "\12\10\1\0\1\10\30\0\25\10\1\213\6\10\1\0"+
    "\1\10\30\0\25\10\1\214\6\10\1\0\1\10\30\0"+
    "\25\10\1\215\6\10\1\0\1\10\30\0\14\10\1\216"+
    "\17\10\1\0\1\10\30\0\4\10\1\217\27\10\1\0"+
    "\1\10\30\0\27\10\1\220\4\10\1\0\1\10\30\0"+
    "\4\10\1\221\27\10\1\0\1\10\30\0\5\10\1\222"+
    "\26\10\1\0\1\10\30\0\24\10\1\223\7\10\1\0"+
    "\1\10\30\0\20\10\1\224\13\10\1\0\1\10\30\0"+
    "\21\10\1\225\12\10\1\0\1\10\30\0\17\10\1\226"+
    "\14\10\1\0\1\10\30\0\6\10\1\227\25\10\1\0"+
    "\1\10\30\0\14\10\1\230\17\10\1\0\1\10\30\0"+
    "\34\10\1\231\1\10\30\0\7\10\1\232\24\10\1\0"+
    "\1\10\30\0\21\10\1\233\12\10\1\0\1\10\46\0"+
    "\1\234\60\0\1\235\70\0\1\236\105\0\1\237\41\0"+
    "\1\240\100\0\1\241\55\0\1\242\73\0\1\243\60\0"+
    "\1\244\56\0\1\245\101\0\1\246\36\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6210];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\22\1\17\11\1\1\2\11\1\1\1\11\1\1\2\0"+
    "\30\1\5\11\2\0\27\1\1\0\57\1\1\0\2\1"+
    "\12\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[166];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  StringBuffer string = new StringBuffer();

  private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
  }
  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1766) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException, MyException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { /* ignore */
          }
        case 56: break;
        case 40: 
          { return symbol(sym.MAIN,yytext());
          }
        case 57: break;
        case 35: 
          { return symbol(sym.CASE,yytext());
          }
        case 58: break;
        case 10: 
          { return symbol(sym.SUMA,yytext());
          }
        case 59: break;
        case 55: 
          { return symbol(sym.SYSTEM_OUT_PRINTln,yytext());
          }
        case 60: break;
        case 29: 
          { string.append('\t');
          }
        case 61: break;
        case 20: 
          { return symbol(sym.PUNTOyCOMA,yytext());
          }
        case 62: break;
        case 38: 
          { return symbol(sym.THIS,yytext());
          }
        case 63: break;
        case 8: 
          { string.setLength(0); yybegin(STRING);
          }
        case 64: break;
        case 12: 
          { return symbol(sym.MENOR_QUE,yytext());
          }
        case 65: break;
        case 16: 
          { return symbol(sym.CORCHETEi,yytext());
          }
        case 66: break;
        case 22: 
          { return symbol(sym.NOT,yytext());
          }
        case 67: break;
        case 42: 
          { return symbol(sym.CLASS,yytext());
          }
        case 68: break;
        case 26: 
          { string.append('\\');
          }
        case 69: break;
        case 7: 
          { return symbol(sym.PUNTO,yytext());
          }
        case 70: break;
        case 37: 
          { return symbol(sym.TRUE,yytext());
          }
        case 71: break;
        case 31: 
          { string.append('\r');
          }
        case 72: break;
        case 18: 
          { return symbol(sym.PARENi,yytext());
          }
        case 73: break;
        case 54: 
          { return symbol(sym.BOOLEAN,yytext());
          }
        case 74: break;
        case 41: 
          { return symbol(sym.ELSE,yytext());
          }
        case 75: break;
        case 6: 
          { return symbol(sym.myINTEGER_LITERAL,yytext());
          }
        case 76: break;
        case 9: 
          { return symbol(sym.ASIGN,yytext());
          }
        case 77: break;
        case 39: 
          { return symbol(sym.VOID,yytext());
          }
        case 78: break;
        case 1: 
          { throw new MyException("Caracter no permitido <"+
                                                    yytext()+">", yyline, yycolumn);
          }
        case 79: break;
        case 14: 
          { return symbol(sym.LLAVEi,yytext());
          }
        case 80: break;
        case 45: 
          { return symbol(sym.WHILE,yytext());
          }
        case 81: break;
        case 28: 
          { return symbol(sym.AND,yytext());
          }
        case 82: break;
        case 46: 
          { return symbol(sym.LENGHT,yytext());
          }
        case 83: break;
        case 32: 
          { string.append('\"');
          }
        case 84: break;
        case 47: 
          { return symbol(sym.STATIC,yytext());
          }
        case 85: break;
        case 27: 
          { return symbol(sym.IF,yytext());
          }
        case 86: break;
        case 17: 
          { return symbol(sym.CORCHETEd,yytext());
          }
        case 87: break;
        case 50: 
          { return symbol(sym.STRING,yytext());
          }
        case 88: break;
        case 11: 
          { return symbol(sym.RESTA,yytext());
          }
        case 89: break;
        case 52: 
          { return symbol(sym.DEFAULT,yytext());
          }
        case 90: break;
        case 36: 
          { return symbol(sym.CHAR,yytext());
          }
        case 91: break;
        case 19: 
          { return symbol(sym.PARENd,yytext());
          }
        case 92: break;
        case 53: 
          { return symbol(sym.EXTENDS,yytext());
          }
        case 93: break;
        case 30: 
          { string.append('\n');
          }
        case 94: break;
        case 13: 
          { return symbol(sym.MAYOR_QUE,yytext());
          }
        case 95: break;
        case 15: 
          { return symbol(sym.LLAVEd,yytext());
          }
        case 96: break;
        case 48: 
          { return symbol(sym.SWITCH,yytext());
          }
        case 97: break;
        case 3: 
          { return symbol(sym.DIV,yytext());
          }
        case 98: break;
        case 34: 
          { return symbol(sym.NEW,yytext());
          }
        case 99: break;
        case 49: 
          { return symbol(sym.PUBLIC,yytext());
          }
        case 100: break;
        case 51: 
          { return symbol(sym.RETURN,yytext());
          }
        case 101: break;
        case 25: 
          { yybegin(YYINITIAL); 
                                   return symbol(sym.mySTRING_LITERAL,string.toString());
          }
        case 102: break;
        case 44: 
          { return symbol(sym.FALSE,yytext());
          }
        case 103: break;
        case 33: 
          { return symbol(sym.INT,yytext());
          }
        case 104: break;
        case 5: 
          { return symbol(sym.myIDENTIFIER,yytext());
          }
        case 105: break;
        case 23: 
          { return symbol(sym.DOSPUNTOS,yytext());
          }
        case 106: break;
        case 21: 
          { return symbol(sym.COMA,yytext());
          }
        case 107: break;
        case 24: 
          { string.append( yytext() );
          }
        case 108: break;
        case 4: 
          { return symbol(sym.MULT,yytext());
          }
        case 109: break;
        case 43: 
          { return symbol(sym.BREAK,yytext());
          }
        case 110: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
