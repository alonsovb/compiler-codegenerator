//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed May 23 20:21:34 CST 2012
//----------------------------------------------------
package proyecto;

import ast.ATypeDecl;
import ast.AnAndExpression;
import ast.AnExpressionMenor;
import ast.AnArrayType;
import ast.AVarDeclaration;
import ast.AStatementPrint;
import ast.AMenorQueExpression;
import ast.ACaseBlockList;
import ast.AnIfStatement;
import ast.ASwitchStatement;
import ast.ASimpleTypeChar;
import ast.AnExpressionTimes;
import ast.ACaseBlock;
import ast.AnExpressionList;
import ast.AMethodDecl;
import ast.AGoal;
import ast.ATypeSimple;
import ast.APlusExpression;
import ast.AWhileStatement;
import ast.APrimaryTrue;
import ast.APrimaryString;
import ast.FormalParameterList;
import ast.AMethodDeclaration;
import ast.ABreakStatement;
import ast.ANotExpression;
import ast.ADivExpression;
import ast.AClassExtendsDeclaration;
import ast.APrimaryAllocationExpression;
import ast.ASimpleTypeInt;
import ast.AFormalParameterBlock;
import ast.AStatementSwitch;
import ast.SimpleType;
import ast.AnExpressionListBlock;
import ast.AMainClass;
import ast.AnExpressionListRest;
import ast.AConstantTrue;
import ast.AStatementList;
import ast.APrimaryInteger;
import ast.AnExpressionArrayLookup;
import ast.AFormalParameterList;
import ast.AnArrayAllocationExpression;
import ast.AClassDeclaration;
import ast.ConstantExpression;
import ast.ABlock;
import ast.ASwitchBlock;
import ast.ABracketExpression;
import ast.AConstantChar;
import ast.AFormalParameterListRest;
import ast.AMessageSend;
import ast.ATimesExpression;
import ast.APrintStatement;
import ast.AnArrayAssignmentStatement;
import ast.APrimaryNotExpression;
import ast.ATypeClassExtendsDeclaration;
import ast.AnExpressionMessage;
import ast.AFormalParameterRest;
import ast.AStatementArrayAssignment;
import ast.AFormalParameter;
import ast.AnExpressionAnd;
import ast.AMayorQueExpression;
import ast.AStatementBlock;
import ast.APrimaryIdentifier;
import ast.AnAllocationExpression;
import ast.AST;
import ast.APrimaryFalse;
import ast.AnArrayLookup;
import ast.Expression;
import ast.AMinusExpression;
import ast.ATypeIdentifier;
import ast.ATypeClassDeclaration;
import ast.APrimaryChar;
import ast.AnExpressionRest;
import ast.AVarDecl;
import ast.Statement;
import ast.AStatementIf;
import ast.AStatementWhile;
import ast.AConstantString;
import ast.AConstantFalse;
import ast.APrimaryArray;
import ast.AnExpressionDiv;
import ast.ADefaultBlock;
import ast.AnExpressionArrayLenght;
import ast.TypeDeclaration;
import ast.AnExpressionPrimary;
import ast.APrimaryThis;
import ast.AnExpressionMinus;
import ast.AnExpressionPlus;
import ast.AStatementAssignment;
import ast.ExpressionList;
import ast.AnArrayLength;
import ast.AnAssignmentStatement;
import ast.AConstantInteger;
import ast.ATypeArray;
import ast.AnExpressionMayor;
import ast.Type;
import ast.APrimaryBracket;
import ast.PrimaryExpression;
import ast.ASimpleTypeBool;
import java_cup.runtime.*;

/**
 * CUP v0.11a beta 20060608 generated parser.
 *
 * @version Wed May 23 20:21:34 CST 2012
 */
public class parser extends java_cup.runtime.lr_parser {

    /**
     * Default constructor.
     */
    public parser() {
        super();
    }

    /**
     * Constructor which sets the default scanner.
     */
    public parser(java_cup.runtime.Scanner s) {
        super(s);
    }

    /**
     * Constructor which sets the default scanner.
     */
    public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
        super(s, sf);
    }
    /**
     * Production table.
     */
    protected static final short _production_table[][] =
            unpackFromStrings(new String[]{
                "\000\142\000\002\002\004\000\002\002\004\000\002\003"
                + "\004\000\002\003\002\000\002\005\023\000\002\004\003"
                + "\000\002\004\003\000\002\006\010\000\002\011\012\000"
                + "\002\012\005\000\002\013\017\000\002\016\003\000\002"
                + "\016\004\000\002\017\004\000\002\020\004\000\002\021"
                + "\003\000\002\021\003\000\002\021\003\000\002\022\003"
                + "\000\002\022\003\000\002\022\003\000\002\023\005\000"
                + "\002\024\003\000\002\024\003\000\002\024\003\000\002"
                + "\024\003\000\002\024\003\000\002\024\003\000\002\024"
                + "\003\000\002\025\005\000\002\026\006\000\002\027\011"
                + "\000\002\030\011\000\002\031\007\000\002\032\007\000"
                + "\002\033\003\000\002\033\003\000\002\033\003\000\002"
                + "\033\003\000\002\033\003\000\002\033\003\000\002\033"
                + "\003\000\002\033\003\000\002\033\003\000\002\033\003"
                + "\000\002\033\003\000\002\034\005\000\002\035\005\000"
                + "\002\036\005\000\002\037\005\000\002\040\005\000\002"
                + "\041\005\000\002\042\005\000\002\043\006\000\002\044"
                + "\005\000\002\045\010\000\002\047\003\000\002\047\004"
                + "\000\002\050\004\000\002\051\003\000\002\051\003\000"
                + "\002\051\003\000\002\051\003\000\002\051\003\000\002"
                + "\051\003\000\002\051\003\000\002\051\003\000\002\051"
                + "\003\000\002\051\003\000\002\051\003\000\002\056\003"
                + "\000\002\056\003\000\002\056\003\000\002\056\003\000"
                + "\002\056\003\000\002\052\007\000\002\053\006\000\002"
                + "\054\004\000\002\055\005\000\002\007\004\000\002\007"
                + "\002\000\002\010\004\000\002\010\002\000\002\015\004"
                + "\000\002\015\002\000\002\046\003\000\002\046\002\000"
                + "\002\014\003\000\002\014\002\000\002\057\011\000\002"
                + "\060\007\000\002\061\006\000\002\061\002\000\002\062"
                + "\004\000\002\062\002\000\002\063\004\000\002\064\004"
                + "\000\002\064\002"});

    /**
     * Access to production table.
     */
    public short[][] production_table() {
        return _production_table;
    }
    /**
     * Parse-action table.
     */
    protected static final short[][] _action_table =
            unpackFromStrings(new String[]{
                "\000\305\000\004\004\005\001\002\000\006\002\ufffe\004"
                + "\ufffe\001\002\000\004\057\010\001\002\000\004\002\007"
                + "\001\002\000\004\002\001\001\002\000\004\005\011\001"
                + "\002\000\004\006\012\001\002\000\004\007\013\001\002"
                + "\000\004\010\014\001\002\000\004\011\015\001\002\000"
                + "\004\012\016\001\002\000\004\013\017\001\002\000\004"
                + "\014\020\001\002\000\004\015\021\001\002\000\004\057"
                + "\022\001\002\000\004\016\023\001\002\000\004\005\024"
                + "\001\002\000\004\033\026\001\002\000\004\017\135\001"
                + "\002\000\004\012\027\001\002\000\026\012\047\045\040"
                + "\046\056\047\045\050\057\051\036\057\054\060\044\061"
                + "\060\062\053\001\002\000\034\014\uffdb\015\uffdb\016\uffdb"
                + "\021\uffdb\023\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040"
                + "\uffdb\041\uffdb\042\uffdb\043\uffdb\001\002\000\034\014\uffdc"
                + "\015\uffdc\016\uffdc\021\uffdc\023\uffdc\034\uffdc\035\uffdc\036"
                + "\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\001\002"
                + "\000\034\014\uffbc\015\uffbc\016\uffbc\021\uffbc\023\uffbc\034"
                + "\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc"
                + "\043\uffbc\001\002\000\034\014\uffd6\015\uffd6\016\uffd6\021"
                + "\uffd6\023\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6"
                + "\041\uffd6\042\uffd6\043\uffd6\001\002\000\034\014\105\015"
                + "\uffd4\016\uffd4\021\uffd4\023\uffd4\034\101\035\107\036\102"
                + "\037\104\040\111\041\106\042\110\043\103\001\002\000"
                + "\034\014\uffbd\015\uffbd\016\uffbd\021\uffbd\023\uffbd\034\uffbd"
                + "\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043"
                + "\uffbd\001\002\000\026\012\047\045\040\046\056\047\045"
                + "\050\057\051\036\057\054\060\044\061\060\062\053\001"
                + "\002\000\034\014\uffd9\015\uffd9\016\uffd9\021\uffd9\023\uffd9"
                + "\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042"
                + "\uffd9\043\uffd9\001\002\000\034\014\uffc3\015\uffc3\016\uffc3"
                + "\021\uffc3\023\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040"
                + "\uffc3\041\uffc3\042\uffc3\043\uffc3\001\002\000\034\014\uffda"
                + "\015\uffda\016\uffda\021\uffda\023\uffda\034\uffda\035\uffda\036"
                + "\uffda\037\uffda\040\uffda\041\uffda\042\uffda\043\uffda\001\002"
                + "\000\034\014\uffbe\015\uffbe\016\uffbe\021\uffbe\023\uffbe\034"
                + "\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe"
                + "\043\uffbe\001\002\000\034\014\uffbf\015\uffbf\016\uffbf\021"
                + "\uffbf\023\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf"
                + "\041\uffbf\042\uffbf\043\uffbf\001\002\000\034\014\uffc4\015"
                + "\uffc4\016\uffc4\021\uffc4\023\uffc4\034\uffc4\035\uffc4\036\uffc4"
                + "\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\001\002\000"
                + "\034\014\uffc0\015\uffc0\016\uffc0\021\uffc0\023\uffc0\034\uffc0"
                + "\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043"
                + "\uffc0\001\002\000\034\014\uffd8\015\uffd8\016\uffd8\021\uffd8"
                + "\023\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041"
                + "\uffd8\042\uffd8\043\uffd8\001\002\000\026\012\047\045\040"
                + "\046\056\047\045\050\057\051\036\057\054\060\044\061"
                + "\060\062\053\001\002\000\034\014\uffde\015\uffde\016\uffde"
                + "\021\uffde\023\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040"
                + "\uffde\041\uffde\042\uffde\043\uffde\001\002\000\034\014\uffd5"
                + "\015\uffd5\016\uffd5\021\uffd5\023\uffd5\034\uffd5\035\uffd5\036"
                + "\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5\001\002"
                + "\000\004\016\074\001\002\000\034\014\uffc6\015\uffc6\016"
                + "\uffc6\021\uffc6\023\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6"
                + "\040\uffc6\041\uffc6\042\uffc6\043\uffc6\001\002\000\034\014"
                + "\uffc1\015\uffc1\016\uffc1\021\uffc1\023\uffc1\034\uffc1\035\uffc1"
                + "\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\001"
                + "\002\000\034\014\uffdd\015\uffdd\016\uffdd\021\uffdd\023\uffdd"
                + "\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\042"
                + "\uffdd\043\uffdd\001\002\000\034\014\uffc2\015\uffc2\016\uffc2"
                + "\021\uffc2\023\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040"
                + "\uffc2\041\uffc2\042\uffc2\043\uffc2\001\002\000\012\024\063"
                + "\025\064\026\065\057\066\001\002\000\034\014\uffc5\015"
                + "\uffc5\016\uffc5\021\uffc5\023\uffc5\034\uffc5\035\uffc5\036\uffc5"
                + "\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\001\002\000"
                + "\034\014\uffd7\015\uffd7\016\uffd7\021\uffd7\023\uffd7\034\uffd7"
                + "\035\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043"
                + "\uffd7\001\002\000\004\014\071\001\002\000\006\014\uffef"
                + "\057\uffef\001\002\000\006\014\uffee\057\uffee\001\002\000"
                + "\006\014\uffed\057\uffed\001\002\000\004\012\067\001\002"
                + "\000\004\016\070\001\002\000\034\014\uffb5\015\uffb5\016"
                + "\uffb5\021\uffb5\023\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5"
                + "\040\uffb5\041\uffb5\042\uffb5\043\uffb5\001\002\000\026\012"
                + "\047\045\040\046\056\047\045\050\057\051\036\057\054"
                + "\060\044\061\060\062\053\001\002\000\004\015\073\001"
                + "\002\000\034\014\uffb6\015\uffb6\016\uffb6\021\uffb6\023\uffb6"
                + "\034\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6\042"
                + "\uffb6\043\uffb6\001\002\000\004\021\075\001\002\000\032"
                + "\005\uffdf\017\uffdf\022\uffdf\030\uffdf\031\uffdf\032\uffdf\033"
                + "\uffdf\052\uffdf\053\uffdf\055\uffdf\056\uffdf\057\uffdf\001\002"
                + "\000\004\016\077\001\002\000\034\014\uffb3\015\uffb3\016"
                + "\uffb3\021\uffb3\023\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3"
                + "\040\uffb3\041\uffb3\042\uffb3\043\uffb3\001\002\000\034\014"
                + "\uffb4\015\uffb4\016\uffb4\021\uffb4\023\uffb4\034\uffb4\035\uffb4"
                + "\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\001"
                + "\002\000\026\012\047\045\040\046\056\047\045\050\057"
                + "\051\036\057\054\060\044\061\060\062\053\001\002\000"
                + "\026\012\047\045\040\046\056\047\045\050\057\051\036"
                + "\057\054\060\044\061\060\062\053\001\002\000\006\044"
                + "\121\057\122\001\002\000\026\012\047\045\040\046\056"
                + "\047\045\050\057\051\036\057\054\060\044\061\060\062"
                + "\053\001\002\000\026\012\047\045\040\046\056\047\045"
                + "\050\057\051\036\057\054\060\044\061\060\062\053\001"
                + "\002\000\026\012\047\045\040\046\056\047\045\050\057"
                + "\051\036\057\054\060\044\061\060\062\053\001\002\000"
                + "\026\012\047\045\040\046\056\047\045\050\057\051\036"
                + "\057\054\060\044\061\060\062\053\001\002\000\026\012"
                + "\047\045\040\046\056\047\045\050\057\051\036\057\054"
                + "\060\044\061\060\062\053\001\002\000\026\012\047\045"
                + "\040\046\056\047\045\050\057\051\036\057\054\060\044"
                + "\061\060\062\053\001\002\000\034\014\uffcf\015\uffcf\016"
                + "\uffcf\021\uffcf\023\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf"
                + "\040\uffcf\041\uffcf\042\uffcf\043\uffcf\001\002\000\034\014"
                + "\uffce\015\uffce\016\uffce\021\uffce\023\uffce\034\uffce\035\uffce"
                + "\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce\043\uffce\001"
                + "\002\000\034\014\uffd2\015\uffd2\016\uffd2\021\uffd2\023\uffd2"
                + "\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042"
                + "\uffd2\043\uffd2\001\002\000\034\014\uffcd\015\uffcd\016\uffcd"
                + "\021\uffcd\023\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040"
                + "\uffcd\041\uffcd\042\uffcd\043\uffcd\001\002\000\004\015\117"
                + "\001\002\000\034\014\uffcc\015\uffcc\016\uffcc\021\uffcc\023"
                + "\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc"
                + "\042\uffcc\043\uffcc\001\002\000\034\014\uffd0\015\uffd0\016"
                + "\uffd0\021\uffd0\023\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0"
                + "\040\uffd0\041\uffd0\042\uffd0\043\uffd0\001\002\000\034\014"
                + "\uffcb\015\uffcb\016\uffcb\021\uffcb\023\uffcb\034\uffcb\035\uffcb"
                + "\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\001"
                + "\002\000\004\012\123\001\002\000\030\012\047\016\uffab"
                + "\045\040\046\056\047\045\050\057\051\036\057\054\060"
                + "\044\061\060\062\053\001\002\000\004\016\132\001\002"
                + "\000\006\016\uffac\023\127\001\002\000\006\016\uffc9\023"
                + "\uffc9\001\002\000\026\012\047\045\040\046\056\047\045"
                + "\050\057\051\036\057\054\060\044\061\060\062\053\001"
                + "\002\000\006\016\uffc8\023\uffc8\001\002\000\006\016\uffc7"
                + "\023\uffc7\001\002\000\034\014\uffca\015\uffca\016\uffca\021"
                + "\uffca\023\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040\uffca"
                + "\041\uffca\042\uffca\043\uffca\001\002\000\034\014\uffd1\015"
                + "\uffd1\016\uffd1\021\uffd1\023\uffd1\034\uffd1\035\uffd1\036\uffd1"
                + "\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\001\002\000"
                + "\034\014\uffd3\015\uffd3\016\uffd3\021\uffd3\023\uffd3\034\uffd3"
                + "\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3\043"
                + "\uffd3\001\002\000\004\017\136\001\002\000\006\002\ufffd"
                + "\004\ufffd\001\002\000\006\002\000\004\142\001\002\000"
                + "\006\002\uffff\004\uffff\001\002\000\006\002\ufffb\004\ufffb"
                + "\001\002\000\004\057\144\001\002\000\006\002\ufffc\004"
                + "\ufffc\001\002\000\006\005\146\020\145\001\002\000\004"
                + "\057\303\001\002\000\016\006\uffb1\017\uffb1\024\uffb1\025"
                + "\uffb1\026\uffb1\057\uffb1\001\002\000\016\006\uffaf\017\uffaf"
                + "\024\063\025\064\026\065\057\152\001\002\000\032\005"
                + "\uffb2\006\uffb2\017\uffb2\022\uffb2\024\uffb2\025\uffb2\026\uffb2"
                + "\030\uffb2\032\uffb2\033\uffb2\055\uffb2\057\uffb2\001\002\000"
                + "\006\014\301\057\ufff2\001\002\000\004\057\ufff0\001\002"
                + "\000\004\057\ufff1\001\002\000\004\057\277\001\002\000"
                + "\006\006\157\017\156\001\002\000\006\002\ufffa\004\ufffa"
                + "\001\002\000\012\024\063\025\064\026\065\057\152\001"
                + "\002\000\006\006\uffb0\017\uffb0\001\002\000\004\057\162"
                + "\001\002\000\004\012\163\001\002\000\014\016\uffa9\024"
                + "\063\025\064\026\065\057\152\001\002\000\004\016\174"
                + "\001\002\000\006\016\ufff6\023\ufff6\001\002\000\004\057"
                + "\173\001\002\000\006\016\uffaa\023\170\001\002\000\012"
                + "\024\063\025\064\026\065\057\152\001\002\000\006\016"
                + "\ufff5\023\ufff5\001\002\000\006\016\ufff3\023\ufff3\001\002"
                + "\000\006\016\ufff4\023\ufff4\001\002\000\004\005\175\001"
                + "\002\000\026\005\uffb1\022\uffb1\024\uffb1\025\uffb1\026\uffb1"
                + "\030\uffb1\032\uffb1\033\uffb1\055\uffb1\057\uffb1\001\002\000"
                + "\026\005\uffad\022\uffad\024\063\025\064\026\065\030\uffad"
                + "\032\uffad\033\uffad\055\uffad\057\152\001\002\000\020\005"
                + "\214\022\212\030\204\032\200\033\026\055\210\057\203"
                + "\001\002\000\004\012\273\001\002\000\032\005\uffe5\017"
                + "\uffe5\022\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\052\uffe5"
                + "\053\uffe5\055\uffe5\056\uffe5\057\uffe5\001\002\000\032\005"
                + "\uffe7\017\uffe7\022\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7"
                + "\052\uffe7\053\uffe7\055\uffe7\056\uffe7\057\uffe7\001\002\000"
                + "\006\014\263\027\262\001\002\000\004\012\254\001\002"
                + "\000\032\005\uffea\017\uffea\022\uffea\030\uffea\031\uffea\032"
                + "\uffea\033\uffea\052\uffea\053\uffea\055\uffea\056\uffea\057\uffea"
                + "\001\002\000\030\005\uffae\017\uffae\022\uffae\030\uffae\032"
                + "\uffae\033\uffae\052\uffae\053\uffae\055\uffae\056\uffae\057\uffae"
                + "\001\002\000\032\005\uffe8\017\uffe8\022\uffe8\030\uffe8\031"
                + "\uffe8\032\uffe8\033\uffe8\052\uffe8\053\uffe8\055\uffe8\056\uffe8"
                + "\057\uffe8\001\002\000\004\012\223\001\002\000\032\005"
                + "\uffe6\017\uffe6\022\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6"
                + "\052\uffe6\053\uffe6\055\uffe6\056\uffe6\057\uffe6\001\002\000"
                + "\026\012\047\045\040\046\056\047\045\050\057\051\036"
                + "\057\054\060\044\061\060\062\053\001\002\000\032\005"
                + "\uffeb\017\uffeb\022\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb"
                + "\052\uffeb\053\uffeb\055\uffeb\056\uffeb\057\uffeb\001\002\000"
                + "\020\005\uffad\017\uffad\030\uffad\032\uffad\033\uffad\055\uffad"
                + "\057\uffad\001\002\000\032\005\uffe9\017\uffe9\022\uffe9\030"
                + "\uffe9\031\uffe9\032\uffe9\033\uffe9\052\uffe9\053\uffe9\055\uffe9"
                + "\056\uffe9\057\uffe9\001\002\000\020\005\214\017\217\030"
                + "\204\032\200\033\026\055\210\057\203\001\002\000\032"
                + "\005\uffe4\017\uffe4\022\uffe4\030\uffe4\031\uffe4\032\uffe4\033"
                + "\uffe4\052\uffe4\053\uffe4\055\uffe4\056\uffe4\057\uffe4\001\002"
                + "\000\004\021\221\001\002\000\004\017\222\001\002\000"
                + "\006\006\ufff7\017\ufff7\001\002\000\026\012\047\045\040"
                + "\046\056\047\045\050\057\051\036\057\054\060\044\061"
                + "\060\062\053\001\002\000\004\016\225\001\002\000\004"
                + "\005\226\001\002\000\010\017\uffa3\053\uffa3\056\uffa3\001"
                + "\002\000\010\017\uffa5\053\235\056\232\001\002\000\004"
                + "\017\231\001\002\000\032\005\uffa8\017\uffa8\022\uffa8\030"
                + "\uffa8\031\uffa8\032\uffa8\033\uffa8\052\uffa8\053\uffa8\055\uffa8"
                + "\056\uffa8\057\uffa8\001\002\000\004\054\251\001\002\000"
                + "\004\017\uffa2\001\002\000\010\017\uffa4\053\uffa4\056\uffa4"
                + "\001\002\000\014\045\236\046\240\060\237\061\242\062"
                + "\243\001\002\000\004\054\uffb8\001\002\000\004\054\uffb9"
                + "\001\002\000\004\054\uffb7\001\002\000\004\054\244\001"
                + "\002\000\004\054\uffba\001\002\000\004\054\uffbb\001\002"
                + "\000\026\005\uffad\017\uffad\030\uffad\032\uffad\033\uffad\052"
                + "\uffad\053\uffad\055\uffad\056\uffad\057\uffad\001\002\000\026"
                + "\005\214\017\uffa0\030\204\032\200\033\026\052\247\053"
                + "\uffa0\055\210\056\uffa0\057\203\001\002\000\010\017\uffa7"
                + "\053\uffa7\056\uffa7\001\002\000\004\021\250\001\002\000"
                + "\010\017\uffa1\053\uffa1\056\uffa1\001\002\000\022\005\uffad"
                + "\017\uffad\030\uffad\032\uffad\033\uffad\052\uffad\055\uffad\057"
                + "\uffad\001\002\000\022\005\214\017\uffa0\030\204\032\200"
                + "\033\026\052\247\055\210\057\203\001\002\000\004\017"
                + "\uffa6\001\002\000\026\012\047\045\040\046\056\047\045"
                + "\050\057\051\036\057\054\060\044\061\060\062\053\001"
                + "\002\000\004\016\256\001\002\000\016\005\214\030\204"
                + "\032\200\033\026\055\210\057\203\001\002\000\004\031"
                + "\260\001\002\000\016\005\214\030\204\032\200\033\026"
                + "\055\210\057\203\001\002\000\032\005\uffe1\017\uffe1\022"
                + "\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\052\uffe1\053\uffe1"
                + "\055\uffe1\056\uffe1\057\uffe1\001\002\000\026\012\047\045"
                + "\040\046\056\047\045\050\057\051\036\057\054\060\044"
                + "\061\060\062\053\001\002\000\026\012\047\045\040\046"
                + "\056\047\045\050\057\051\036\057\054\060\044\061\060"
                + "\062\053\001\002\000\004\015\265\001\002\000\004\027"
                + "\266\001\002\000\026\012\047\045\040\046\056\047\045"
                + "\050\057\051\036\057\054\060\044\061\060\062\053\001"
                + "\002\000\004\021\270\001\002\000\032\005\uffe2\017\uffe2"
                + "\022\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\052\uffe2\053"
                + "\uffe2\055\uffe2\056\uffe2\057\uffe2\001\002\000\004\021\272"
                + "\001\002\000\032\005\uffe3\017\uffe3\022\uffe3\030\uffe3\031"
                + "\uffe3\032\uffe3\033\uffe3\052\uffe3\053\uffe3\055\uffe3\056\uffe3"
                + "\057\uffe3\001\002\000\026\012\047\045\040\046\056\047"
                + "\045\050\057\051\036\057\054\060\044\061\060\062\053"
                + "\001\002\000\004\016\275\001\002\000\016\005\214\030"
                + "\204\032\200\033\026\055\210\057\203\001\002\000\032"
                + "\005\uffe0\017\uffe0\022\uffe0\030\uffe0\031\uffe0\032\uffe0\033"
                + "\uffe0\052\uffe0\053\uffe0\055\uffe0\056\uffe0\057\uffe0\001\002"
                + "\000\004\021\300\001\002\000\032\005\ufff8\006\ufff8\017"
                + "\ufff8\022\ufff8\024\ufff8\025\ufff8\026\ufff8\030\ufff8\032\ufff8"
                + "\033\ufff8\055\ufff8\057\ufff8\001\002\000\004\015\302\001"
                + "\002\000\004\057\uffec\001\002\000\004\005\304\001\002"
                + "\000\016\006\uffb1\017\uffb1\024\uffb1\025\uffb1\026\uffb1\057"
                + "\uffb1\001\002\000\016\006\uffaf\017\uffaf\024\063\025\064"
                + "\026\065\057\152\001\002\000\006\006\157\017\307\001"
                + "\002\000\006\002\ufff9\004\ufff9\001\002"});

    /**
     * Access to parse-action table.
     */
    public short[][] action_table() {
        return _action_table;
    }
    /**
     * <
     * code>reduce_goto</code> table.
     */
    protected static final short[][] _reduce_table =
            unpackFromStrings(new String[]{
                "\000\305\000\006\002\005\005\003\001\001\000\004\003"
                + "\136\001\001\000\002\001\001\000\002\001\001\000\002"
                + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
                + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
                + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
                + "\002\001\001\000\002\001\001\000\002\001\001\000\004"
                + "\032\024\001\001\000\002\001\001\000\002\001\001\000"
                + "\042\033\051\034\047\035\054\036\030\037\027\040\040"
                + "\041\036\042\045\043\060\044\032\045\050\051\033\052"
                + "\042\053\041\054\034\055\031\001\001\000\002\001\001"
                + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
                + "\002\001\001\000\002\001\001\000\042\033\077\034\047"
                + "\035\054\036\030\037\027\040\040\041\036\042\045\043"
                + "\060\044\032\045\050\051\033\052\042\053\041\054\034"
                + "\055\031\001\001\000\002\001\001\000\002\001\001\000"
                + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
                + "\001\001\000\002\001\001\000\002\001\001\000\042\033"
                + "\075\034\047\035\054\036\030\037\027\040\040\041\036"
                + "\042\045\043\060\044\032\045\050\051\033\052\042\053"
                + "\041\054\034\055\031\001\001\000\002\001\001\000\002"
                + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
                + "\001\000\002\001\001\000\002\001\001\000\004\022\061"
                + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
                + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
                + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
                + "\042\033\071\034\047\035\054\036\030\037\027\040\040"
                + "\041\036\042\045\043\060\044\032\045\050\051\033\052"
                + "\042\053\041\054\034\055\031\001\001\000\002\001\001"
                + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
                + "\002\001\001\000\002\001\001\000\002\001\001\000\014"
                + "\051\133\052\042\053\041\054\034\055\031\001\001\000"
                + "\014\051\132\052\042\053\041\054\034\055\031\001\001"
                + "\000\002\001\001\000\014\051\117\052\042\053\041\054"
                + "\034\055\031\001\001\000\014\051\115\052\042\053\041"
                + "\054\034\055\031\001\001\000\014\051\114\052\042\053"
                + "\041\054\034\055\031\001\001\000\014\051\113\052\042"
                + "\053\041\054\034\055\031\001\001\000\014\051\112\052"
                + "\042\053\041\054\034\055\031\001\001\000\014\051\111"
                + "\052\042\053\041\054\034\055\031\001\001\000\002\001"
                + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
                + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
                + "\002\001\001\000\002\001\001\000\046\033\125\034\047"
                + "\035\054\036\030\037\027\040\040\041\036\042\045\043"
                + "\060\044\032\045\050\046\123\047\124\051\033\052\042"
                + "\053\041\054\034\055\031\001\001\000\002\001\001\000"
                + "\004\050\127\001\001\000\002\001\001\000\044\033\125"
                + "\034\047\035\054\036\030\037\027\040\040\041\036\042"
                + "\045\043\060\044\032\045\050\047\130\051\033\052\042"
                + "\053\041\054\034\055\031\001\001\000\002\001\001\000"
                + "\004\050\127\001\001\000\002\001\001\000\002\001\001"
                + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
                + "\010\004\137\006\142\011\140\001\001\000\002\001\001"
                + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
                + "\002\001\001\000\002\001\001\000\004\007\146\001\001"
                + "\000\014\010\154\012\147\021\153\022\150\023\152\001"
                + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
                + "\000\002\001\001\000\002\001\001\000\004\013\157\001"
                + "\001\000\002\001\001\000\010\021\160\022\150\023\152"
                + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
                + "\001\000\016\014\163\016\166\017\164\021\165\022\150"
                + "\023\152\001\001\000\002\001\001\000\002\001\001\000"
                + "\002\001\001\000\004\020\170\001\001\000\014\016\171"
                + "\017\164\021\165\022\150\023\152\001\001\000\002\001"
                + "\001\000\004\020\170\001\001\000\002\001\001\000\002"
                + "\001\001\000\004\007\175\001\001\000\014\012\147\015"
                + "\176\021\153\022\150\023\152\001\001\000\022\024\205"
                + "\025\212\026\204\027\214\030\206\031\201\032\200\057"
                + "\210\001\001\000\002\001\001\000\002\001\001\000\002"
                + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
                + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
                + "\000\002\001\001\000\042\033\217\034\047\035\054\036"
                + "\030\037\027\040\040\041\036\042\045\043\060\044\032"
                + "\045\050\051\033\052\042\053\041\054\034\055\031\001"
                + "\001\000\002\001\001\000\004\015\215\001\001\000\002"
                + "\001\001\000\022\024\205\025\212\026\204\027\214\030"
                + "\206\031\201\032\200\057\210\001\001\000\002\001\001"
                + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
                + "\042\033\223\034\047\035\054\036\030\037\027\040\040"
                + "\041\036\042\045\043\060\044\032\045\050\051\033\052"
                + "\042\053\041\054\034\055\031\001\001\000\002\001\001"
                + "\000\002\001\001\000\006\062\226\063\227\001\001\000"
                + "\006\060\233\061\232\001\001\000\002\001\001\000\002"
                + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
                + "\001\000\004\056\240\001\001\000\002\001\001\000\002"
                + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
                + "\001\000\002\001\001\000\004\015\244\001\001\000\024"
                + "\024\205\025\212\026\204\027\214\030\206\031\201\032"
                + "\200\057\210\064\245\001\001\000\002\001\001\000\002"
                + "\001\001\000\002\001\001\000\004\015\251\001\001\000"
                + "\024\024\205\025\212\026\204\027\214\030\206\031\201"
                + "\032\200\057\210\064\252\001\001\000\002\001\001\000"
                + "\042\033\254\034\047\035\054\036\030\037\027\040\040"
                + "\041\036\042\045\043\060\044\032\045\050\051\033\052"
                + "\042\053\041\054\034\055\031\001\001\000\002\001\001"
                + "\000\022\024\256\025\212\026\204\027\214\030\206\031"
                + "\201\032\200\057\210\001\001\000\002\001\001\000\022"
                + "\024\260\025\212\026\204\027\214\030\206\031\201\032"
                + "\200\057\210\001\001\000\002\001\001\000\042\033\270"
                + "\034\047\035\054\036\030\037\027\040\040\041\036\042"
                + "\045\043\060\044\032\045\050\051\033\052\042\053\041"
                + "\054\034\055\031\001\001\000\042\033\263\034\047\035"
                + "\054\036\030\037\027\040\040\041\036\042\045\043\060"
                + "\044\032\045\050\051\033\052\042\053\041\054\034\055"
                + "\031\001\001\000\002\001\001\000\002\001\001\000\042"
                + "\033\266\034\047\035\054\036\030\037\027\040\040\041"
                + "\036\042\045\043\060\044\032\045\050\051\033\052\042"
                + "\053\041\054\034\055\031\001\001\000\002\001\001\000"
                + "\002\001\001\000\002\001\001\000\002\001\001\000\042"
                + "\033\273\034\047\035\054\036\030\037\027\040\040\041"
                + "\036\042\045\043\060\044\032\045\050\051\033\052\042"
                + "\053\041\054\034\055\031\001\001\000\002\001\001\000"
                + "\022\024\275\025\212\026\204\027\214\030\206\031\201"
                + "\032\200\057\210\001\001\000\002\001\001\000\002\001"
                + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
                + "\000\002\001\001\000\004\007\304\001\001\000\014\010"
                + "\305\012\147\021\153\022\150\023\152\001\001\000\004"
                + "\013\157\001\001\000\002\001\001"});

    /**
     * Access to
     * <code>reduce_goto</code> table.
     */
    public short[][] reduce_table() {
        return _reduce_table;
    }
    /**
     * Instance of action encapsulation class.
     */
    protected CUP$parser$actions action_obj;

    /**
     * Action encapsulation object initializer.
     */
    protected void init_actions() {
        action_obj = new CUP$parser$actions(this);
    }

    /**
     * Invoke a user supplied parse action.
     */
    public java_cup.runtime.Symbol do_action(
            int act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack stack,
            int top)
            throws java.lang.Exception {
        /*
         * call code in generated class
         */
        return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
    }

    /**
     * Indicates start state.
     */
    public int start_state() {
        return 0;
    }

    /**
     * Indicates start production.
     */
    public int start_production() {
        return 0;
    }

    /**
     * <
     * code>EOF</code> Symbol index.
     */
    public int EOF_sym() {
        return 0;
    }

    /**
     * <
     * code>error</code> Symbol index.
     */
    public int error_sym() {
        return 1;
    }
    Scanner scanner;
    public AST raiz;
    public Reporter reporter;

    public parser(java.io.Reader input) {
        scanner = new Scanner(input);
    }

    public String errores(int sys) {
        if (sys == 2) {
            return ("INT");
        } else if (sys == 3) {
            return ("STRING");
        } else if (sys == 4) {
            return ("ASIGN");
        } else if (sys == 5) {
            return ("MULT");
        } else if (sys == 6) {
            return ("SUMA");
        } else if (sys == 7) {
            return ("PARENi");
        } else if (sys == 8) {
            return ("PARENd");
        } else if (sys == 9) {
            return ("PUNTOyCOMA");
        } else if (sys == 10) {
            return ("COMA");
        } else if (sys == 11) {
            return ("NUM");
        } else if (sys == 12) {
            return ("STRING");
        } else if (sys == 13) {
            return ("myIDENTIFIER");
        } else {
            return ("error");
        }
    }

    public void syntax_error(Symbol cur_token) {
        report_error("Unexpected symbol \"" + cur_token.value.toString() + "\"", cur_token);
    }

    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder();

        if (info instanceof java_cup.runtime.Symbol) {
            // m.append("(").append(errores(((java_cup.runtime.Symbol) info).sym)).append(")");
            m.append("Line ").append(((java_cup.runtime.Symbol) info).left).append(", Column ").append(((java_cup.runtime.Symbol) info).right);

            if (((java_cup.runtime.Symbol) info).value != null) {
                // m.append(". Lexema: ").append(((java_cup.runtime.Symbol) info).value.toString());
            }

        }
        m.append(". ").append(message);
        if (reporter != null) {
            reporter.ReportError(m.toString());
        }
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        
    }
}

/**
 * Cup generated class to encapsulate user supplied action code.
 */
class CUP$parser$actions {

    private final parser parser;

    /**
     * Constructor
     */
    CUP$parser$actions(parser parser) {
        this.parser = parser;
    }

    /**
     * Method with the actual generated action code.
     */
    public final java_cup.runtime.Symbol CUP$parser$do_action(
            int CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack CUP$parser$stack,
            int CUP$parser$top)
            throws java.lang.Exception {
        /*
         * Symbol object for return from actions
         */
        java_cup.runtime.Symbol CUP$parser$result;

        /*
         * select the action based on the action number
         */
        switch (CUP$parser$act_num) {
            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 97: // aBreakStatement ::= 
            {
                ABreakStatement RESULT = null;

                RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("aBreakStatement", 50, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 96: // aBreakStatement ::= BREAK PUNTOyCOMA 
            {
                ABreakStatement RESULT = null;

                RESULT = new ABreakStatement();

                CUP$parser$result = parser.getSymbolFactory().newSymbol("aBreakStatement", 50, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 95: // aSwitchBlock ::= aCaseBlockList aDefaultBlock 
            {
                ASwitchBlock RESULT = null;
                int cblleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int cblright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                ACaseBlockList cbl = (ACaseBlockList) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                int dbleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int dbright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ADefaultBlock db = (ADefaultBlock) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new ASwitchBlock(cbl, db);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("aSwitchBlock", 49, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 94: // aCaseBlockList ::= 
            {
                ACaseBlockList RESULT = null;

                RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("aCaseBlockList", 48, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 93: // aCaseBlockList ::= aCaseBlockList aCaseBlock 
            {
                ACaseBlockList RESULT = null;
                int cblleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int cblright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                ACaseBlockList cbl = (ACaseBlockList) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                int cbleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int cbright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ACaseBlock cb = (ACaseBlock) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new ACaseBlockList(cbl, cb);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("aCaseBlockList", 48, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 92: // aDefaultBlock ::= 
            {
                ADefaultBlock RESULT = null;

                RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("aDefaultBlock", 47, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 91: // aDefaultBlock ::= DEFAULT DOSPUNTOS aStatementList aBreakStatement 
            {
                ADefaultBlock RESULT = null;
                int slleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int slright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                AStatementList sl = (AStatementList) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                int bsleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int bsright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ABreakStatement bs = (ABreakStatement) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new ADefaultBlock(sl, bs);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("aDefaultBlock", 47, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 90: // aCaseBlock ::= CASE constantExpression DOSPUNTOS aStatementList aBreakStatement 
            {
                ACaseBlock RESULT = null;
                int celeft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).left;
                int ceright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).right;
                ConstantExpression ce = (ConstantExpression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;
                int slleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int slright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                AStatementList sl = (AStatementList) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                int bsleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int bsright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ABreakStatement bs = (ABreakStatement) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new ACaseBlock(ce, sl, bs);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("aCaseBlock", 46, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 89: // aSwitchStatement ::= SWITCH PARENi expression PARENd LLAVEi aSwitchBlock LLAVEd 
            {
                ASwitchStatement RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).right;
                Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).value;
                int sbleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int sbright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                ASwitchBlock sb = (ASwitchBlock) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;

                RESULT = new ASwitchStatement(e, sb);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("aSwitchStatement", 45, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 6)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 88: // aFormalParameterBlock ::= 
            {
                AFormalParameterBlock RESULT = null;

                RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("aFormalParameterBlock", 10, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 87: // aFormalParameterBlock ::= formalParameterList 
            {
                AFormalParameterBlock RESULT = null;
                int fplleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int fplright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                FormalParameterList fpl = (FormalParameterList) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new AFormalParameterBlock(fpl);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("aFormalParameterBlock", 10, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 86: // anExpressionListBlock ::= 
            {
                AnExpressionListBlock RESULT = null;

                RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("anExpressionListBlock", 36, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 85: // anExpressionListBlock ::= expressionList 
            {
                AnExpressionListBlock RESULT = null;
                int elleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int elright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ExpressionList el = (ExpressionList) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new AnExpressionListBlock(el);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("anExpressionListBlock", 36, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 84: // aStatementList ::= 
            {
                AStatementList RESULT = null;

                RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("aStatementList", 11, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 83: // aStatementList ::= aStatementList statement 
            {
                AStatementList RESULT = null;
                int slleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int slright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                AStatementList sl = (AStatementList) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int sright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                Statement s = (Statement) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new AStatementList(sl, s);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("aStatementList", 11, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 82: // aMethodDecl ::= 
            {
                AMethodDecl RESULT = null;

                RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("aMethodDecl", 6, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 81: // aMethodDecl ::= aMethodDecl aMethodDeclaration 
            {
                AMethodDecl RESULT = null;
                int mdleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int mdright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                AMethodDecl md = (AMethodDecl) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                int mdecleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int mdecright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                AMethodDeclaration mdec = (AMethodDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new AMethodDecl(md, mdec);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("aMethodDecl", 6, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 80: // aVarDecl ::= 
            {
                AVarDecl RESULT = null;

                RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("aVarDecl", 5, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 79: // aVarDecl ::= aVarDecl aVarDeclaration 
            {
                AVarDecl RESULT = null;
                int vdleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int vdright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                AVarDecl vd = (AVarDecl) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                int vdecleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int vdecright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                AVarDeclaration vdec = (AVarDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new AVarDecl(vd, vdec);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("aVarDecl", 5, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 78: // aBracketExpression ::= PARENi expression PARENd 
            {
                ABracketExpression RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;

                RESULT = new ABracketExpression(e);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("aBracketExpression", 43, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 77: // aNotExpression ::= NOT expression 
            {
                ANotExpression RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new ANotExpression(e);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("aNotExpression", 42, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 76: // anAllocationExpression ::= NEW myIDENTIFIER PARENi PARENd 
            {
                AnAllocationExpression RESULT = null;
                int idleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;

                Symbol ident = new Symbol(sym.myIDENTIFIER, idleft, idright, id);
                RESULT = new AnAllocationExpression(ident);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("anAllocationExpression", 41, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 75: // anArrayAllocationExpression ::= NEW simpleType CORCHETEi expression CORCHETEd 
            {
                AnArrayAllocationExpression RESULT = null;
                int stleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).left;
                int stright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).right;
                SimpleType st = (SimpleType) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;
                int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;

                RESULT = new AnArrayAllocationExpression(st, e);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("anArrayAllocationExpression", 40, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 74: // constantExpression ::= FALSE 
            {
                ConstantExpression RESULT = null;

                RESULT = new AConstantFalse();

                CUP$parser$result = parser.getSymbolFactory().newSymbol("constantExpression", 44, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 73: // constantExpression ::= TRUE 
            {
                ConstantExpression RESULT = null;

                RESULT = new AConstantTrue();

                CUP$parser$result = parser.getSymbolFactory().newSymbol("constantExpression", 44, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 72: // constantExpression ::= mySTRING_LITERAL 
            {
                ConstantExpression RESULT = null;
                int slleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int slright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                String sl = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                Symbol string_lit = new Symbol(sym.mySTRING_LITERAL, slleft, slright, sl);
                RESULT = new AConstantString(string_lit);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("constantExpression", 44, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 71: // constantExpression ::= myCHAR_LITERAL 
            {
                ConstantExpression RESULT = null;
                int clleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int clright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                String cl = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                Symbol char_lit = new Symbol(sym.myCHAR_LITERAL, clleft, clright, cl);
                RESULT = new AConstantChar(char_lit);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("constantExpression", 44, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 70: // constantExpression ::= myINTEGER_LITERAL 
            {
                ConstantExpression RESULT = null;
                int illeft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int ilright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                String il = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                Symbol int_lit = new Symbol(sym.myINTEGER_LITERAL, illeft, ilright, il);
                RESULT = new AConstantInteger(int_lit);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("constantExpression", 44, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 69: // primaryExpression ::= aBracketExpression 
            {
                PrimaryExpression RESULT = null;
                int beleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int beright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ABracketExpression be = (ABracketExpression) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new APrimaryBracket(be);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpression", 39, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 68: // primaryExpression ::= aNotExpression 
            {
                PrimaryExpression RESULT = null;
                int neleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int neright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ANotExpression ne = (ANotExpression) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new APrimaryNotExpression(ne);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpression", 39, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 67: // primaryExpression ::= anAllocationExpression 
            {
                PrimaryExpression RESULT = null;
                int aeleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int aeright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                AnAllocationExpression ae = (AnAllocationExpression) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new APrimaryAllocationExpression(ae);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpression", 39, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 66: // primaryExpression ::= anArrayAllocationExpression 
            {
                PrimaryExpression RESULT = null;
                int aaeleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int aaeright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                AnArrayAllocationExpression aae = (AnArrayAllocationExpression) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new APrimaryArray(aae);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpression", 39, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 65: // primaryExpression ::= THIS 
            {
                PrimaryExpression RESULT = null;

                RESULT = new APrimaryThis();

                CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpression", 39, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 64: // primaryExpression ::= myIDENTIFIER 
            {
                PrimaryExpression RESULT = null;
                int idleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int idright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                Symbol ident = new Symbol(sym.myIDENTIFIER, idleft, idright, id);
                RESULT = new APrimaryIdentifier(ident);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpression", 39, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 63: // primaryExpression ::= FALSE 
            {
                PrimaryExpression RESULT = null;

                RESULT = new APrimaryFalse();

                CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpression", 39, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 62: // primaryExpression ::= TRUE 
            {
                PrimaryExpression RESULT = null;

                RESULT = new APrimaryTrue();

                CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpression", 39, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 61: // primaryExpression ::= mySTRING_LITERAL 
            {
                PrimaryExpression RESULT = null;
                int slleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int slright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                String sl = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                Symbol string_lit = new Symbol(sym.mySTRING_LITERAL, slleft, slright, sl);
                RESULT = new APrimaryString(string_lit);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpression", 39, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 60: // primaryExpression ::= myCHAR_LITERAL 
            {
                PrimaryExpression RESULT = null;
                int clleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int clright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                String cl = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                Symbol char_lit = new Symbol(sym.myCHAR_LITERAL, clleft, clright, cl);
                RESULT = new APrimaryChar(char_lit);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpression", 39, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 59: // primaryExpression ::= myINTEGER_LITERAL 
            {
                PrimaryExpression RESULT = null;
                int illeft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int ilright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                String il = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                Symbol int_lit = new Symbol(sym.myINTEGER_LITERAL, illeft, ilright, il);
                RESULT = new APrimaryInteger(int_lit);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpression", 39, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 58: // anExpressionRest ::= COMA expressionList 
            {
                AnExpressionRest RESULT = null;
                int elleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int elright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ExpressionList el = (ExpressionList) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new AnExpressionRest(el);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("anExpressionRest", 38, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 57: // expressionList ::= expressionList anExpressionRest 
            {
                ExpressionList RESULT = null;
                int elleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int elright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                ExpressionList el = (ExpressionList) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                int erleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int erright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                AnExpressionRest er = (AnExpressionRest) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new AnExpressionListRest(el, er);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expressionList", 37, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 56: // expressionList ::= expression 
            {
                ExpressionList RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new AnExpressionList(e);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expressionList", 37, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 55: // aMessageSend ::= primaryExpression PUNTO myIDENTIFIER PARENi anExpressionListBlock PARENd 
            {
                AMessageSend RESULT = null;
                int peleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).left;
                int peright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).right;
                PrimaryExpression pe = (PrimaryExpression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).value;
                int idleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;
                int elbleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int elbright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                AnExpressionListBlock elb = (AnExpressionListBlock) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;

                Symbol ident = new Symbol(sym.myIDENTIFIER, idleft, idright, id);
                RESULT = new AMessageSend(pe, ident, elb);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("aMessageSend", 35, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 54: // anArrayLength ::= primaryExpression PUNTO LENGHT 
            {
                AnArrayLength RESULT = null;
                int peleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int peright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                PrimaryExpression pe = (PrimaryExpression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;

                RESULT = new AnArrayLength(pe);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("anArrayLength", 34, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 53: // anArrayLookup ::= primaryExpression CORCHETEi primaryExpression CORCHETEd 
            {
                AnArrayLookup RESULT = null;
                int pe1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).left;
                int pe1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).right;
                PrimaryExpression pe1 = (PrimaryExpression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;
                int pe2left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int pe2right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                PrimaryExpression pe2 = (PrimaryExpression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;

                RESULT = new AnArrayLookup(pe1, pe2);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("anArrayLookup", 33, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 52: // aTimesExpression ::= primaryExpression MULT primaryExpression 
            {
                ATimesExpression RESULT = null;
                int pe1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int pe1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                PrimaryExpression pe1 = (PrimaryExpression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                int pe2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int pe2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                PrimaryExpression pe2 = (PrimaryExpression) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new ATimesExpression(pe1, pe2);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("aTimesExpression", 32, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 51: // aDivExpression ::= primaryExpression DIV primaryExpression 
            {
                ADivExpression RESULT = null;
                int pe1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int pe1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                PrimaryExpression pe1 = (PrimaryExpression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                int pe2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int pe2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                PrimaryExpression pe2 = (PrimaryExpression) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new ADivExpression(pe1, pe2);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("aDivExpression", 31, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 50: // aMinusExpression ::= primaryExpression RESTA primaryExpression 
            {
                AMinusExpression RESULT = null;
                int pe1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int pe1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                PrimaryExpression pe1 = (PrimaryExpression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                int pe2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int pe2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                PrimaryExpression pe2 = (PrimaryExpression) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new AMinusExpression(pe1, pe2);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("aMinusExpression", 30, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 49: // aPlusExpression ::= primaryExpression SUMA primaryExpression 
            {
                APlusExpression RESULT = null;
                int pe1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int pe1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                PrimaryExpression pe1 = (PrimaryExpression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                int pe2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int pe2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                PrimaryExpression pe2 = (PrimaryExpression) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new APlusExpression(pe1, pe2);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("aPlusExpression", 29, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 48: // aMayorQueExpression ::= primaryExpression MAYOR_QUE primaryExpression 
            {
                AMayorQueExpression RESULT = null;
                int pe1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int pe1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                PrimaryExpression pe1 = (PrimaryExpression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                int pe2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int pe2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                PrimaryExpression pe2 = (PrimaryExpression) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new AMayorQueExpression(pe1, pe2);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("aMayorQueExpression", 28, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 47: // aMenorQueExpression ::= primaryExpression MENOR_QUE primaryExpression 
            {
                AMenorQueExpression RESULT = null;
                int pe1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int pe1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                PrimaryExpression pe1 = (PrimaryExpression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                int pe2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int pe2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                PrimaryExpression pe2 = (PrimaryExpression) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new AMenorQueExpression(pe1, pe2);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("aMenorQueExpression", 27, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 46: // anAndExpression ::= primaryExpression AND primaryExpression 
            {
                AnAndExpression RESULT = null;
                int pe1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int pe1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                PrimaryExpression pe1 = (PrimaryExpression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                int pe2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int pe2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                PrimaryExpression pe2 = (PrimaryExpression) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new AnAndExpression(pe1, pe2);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("anAndExpression", 26, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 45: // expression ::= primaryExpression 
            {
                Expression RESULT = null;
                int primeleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int primeright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                PrimaryExpression prime = (PrimaryExpression) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new AnExpressionPrimary(prime);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expression", 25, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 44: // expression ::= aMessageSend 
            {
                Expression RESULT = null;
                int msleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int msright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                AMessageSend ms = (AMessageSend) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new AnExpressionMessage(ms);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expression", 25, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 43: // expression ::= anArrayLength 
            {
                Expression RESULT = null;
                int alenghtleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int alenghtright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                AnArrayLength alenght = (AnArrayLength) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new AnExpressionArrayLenght(alenght);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expression", 25, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 42: // expression ::= anArrayLookup 
            {
                Expression RESULT = null;
                int alookupleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int alookupright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                AnArrayLookup alookup = (AnArrayLookup) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new AnExpressionArrayLookup(alookup);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expression", 25, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 41: // expression ::= aTimesExpression 
            {
                Expression RESULT = null;
                int teleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int teright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ATimesExpression te = (ATimesExpression) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new AnExpressionTimes(te);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expression", 25, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 40: // expression ::= aDivExpression 
            {
                Expression RESULT = null;
                int deleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int deright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ADivExpression de = (ADivExpression) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new AnExpressionDiv(de);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expression", 25, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 39: // expression ::= aMinusExpression 
            {
                Expression RESULT = null;
                int meleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int meright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                AMinusExpression me = (AMinusExpression) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new AnExpressionMinus(me);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expression", 25, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 38: // expression ::= aPlusExpression 
            {
                Expression RESULT = null;
                int pluseleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int pluseright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                APlusExpression pluse = (APlusExpression) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new AnExpressionPlus(pluse);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expression", 25, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 37: // expression ::= aMayorQueExpression 
            {
                Expression RESULT = null;
                int mayorqeleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int mayorqeright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                AMayorQueExpression mayorqe = (AMayorQueExpression) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new AnExpressionMayor(mayorqe);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expression", 25, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 36: // expression ::= aMenorQueExpression 
            {
                Expression RESULT = null;
                int menorqeleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int menorqeright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                AMenorQueExpression menorqe = (AMenorQueExpression) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new AnExpressionMenor(menorqe);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expression", 25, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 35: // expression ::= anAndExpression 
            {
                Expression RESULT = null;
                int aeleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int aeright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                AnAndExpression ae = (AnAndExpression) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new AnExpressionAnd(ae);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expression", 25, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 34: // aPrintStatement ::= SYSTEM_OUT_PRINTln PARENi expression PARENd PUNTOyCOMA 
            {
                APrintStatement RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;

                RESULT = new APrintStatement(e);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("aPrintStatement", 24, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 33: // aWhileStatement ::= WHILE PARENi expression PARENd statement 
            {
                AWhileStatement RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int sright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                Statement s = (Statement) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new AWhileStatement(e, s);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("aWhileStatement", 23, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 32: // anIfStatement ::= IF PARENi expression PARENd statement ELSE statement 
            {
                AnIfStatement RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).right;
                Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).value;
                int s1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int s1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                Statement s1 = (Statement) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                int s2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int s2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                Statement s2 = (Statement) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new AnIfStatement(e, s1, s2);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("anIfStatement", 22, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 6)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 31: // anArrayAssignmentStatement ::= myIDENTIFIER CORCHETEi expression CORCHETEd ASIGN expression PUNTOyCOMA 
            {
                AnArrayAssignmentStatement RESULT = null;
                int idleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 6)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 6)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 6)).value;
                int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).right;
                Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).value;
                int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;

                Symbol ident = new Symbol(sym.myIDENTIFIER, idleft, idright, id);
                RESULT = new AnArrayAssignmentStatement(ident, e1, e2);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("anArrayAssignmentStatement", 21, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 6)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 30: // anAssignmentStatement ::= myIDENTIFIER ASIGN expression PUNTOyCOMA 
            {
                AnAssignmentStatement RESULT = null;
                int idleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;
                int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;

                Symbol ident = new Symbol(sym.myIDENTIFIER, idleft, idright, id);
                RESULT = new AnAssignmentStatement(ident, e);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("anAssignmentStatement", 20, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 29: // aBlock ::= LLAVEi aStatementList LLAVEd 
            {
                ABlock RESULT = null;
                int slleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int slright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                AStatementList sl = (AStatementList) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;

                RESULT = new ABlock(sl);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("aBlock", 19, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 28: // statement ::= aPrintStatement 
            {
                Statement RESULT = null;
                int psleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int psright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                APrintStatement ps = (APrintStatement) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new AStatementPrint(ps);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement", 18, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 27: // statement ::= aSwitchStatement 
            {
                Statement RESULT = null;
                int ssleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int ssright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ASwitchStatement ss = (ASwitchStatement) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new AStatementSwitch(ss);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement", 18, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 26: // statement ::= aWhileStatement 
            {
                Statement RESULT = null;
                int wsleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int wsright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                AWhileStatement ws = (AWhileStatement) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new AStatementWhile(ws);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement", 18, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 25: // statement ::= anIfStatement 
            {
                Statement RESULT = null;
                int isleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int isright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                AnIfStatement is = (AnIfStatement) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new AStatementIf(is);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement", 18, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 24: // statement ::= anArrayAssignmentStatement 
            {
                Statement RESULT = null;
                int aasleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int aasright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                AnArrayAssignmentStatement aas = (AnArrayAssignmentStatement) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new AStatementArrayAssignment(aas);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement", 18, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 23: // statement ::= anAssignmentStatement 
            {
                Statement RESULT = null;
                int asleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int asright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                AnAssignmentStatement as = (AnAssignmentStatement) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new AStatementAssignment(as);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement", 18, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 22: // statement ::= aBlock 
            {
                Statement RESULT = null;
                int bleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ABlock b = (ABlock) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new AStatementBlock(b);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement", 18, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 21: // arrayType ::= simpleType CORCHETEi CORCHETEd 
            {
                AnArrayType RESULT = null;
                int stleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int stright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                SimpleType st = (SimpleType) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;

                RESULT = new AnArrayType(st);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayType", 17, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 20: // simpleType ::= INT 
            {
                SimpleType RESULT = null;

                RESULT = new ASimpleTypeInt();

                CUP$parser$result = parser.getSymbolFactory().newSymbol("simpleType", 16, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 19: // simpleType ::= BOOLEAN 
            {
                SimpleType RESULT = null;

                RESULT = new ASimpleTypeBool();

                CUP$parser$result = parser.getSymbolFactory().newSymbol("simpleType", 16, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 18: // simpleType ::= CHAR 
            {
                SimpleType RESULT = null;

                RESULT = new ASimpleTypeChar();

                CUP$parser$result = parser.getSymbolFactory().newSymbol("simpleType", 16, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 17: // type ::= myIDENTIFIER 
            {
                Type RESULT = null;
                int idleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int idright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                Symbol ident = new Symbol(sym.myIDENTIFIER, idleft, idright, id);
                RESULT = new ATypeIdentifier(ident);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("type", 15, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 16: // type ::= arrayType 
            {
                Type RESULT = null;
                int atleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int atright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                AnArrayType at = (AnArrayType) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new ATypeArray(at);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("type", 15, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 15: // type ::= simpleType 
            {
                Type RESULT = null;
                int stleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int stright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                SimpleType st = (SimpleType) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new ATypeSimple(st);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("type", 15, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 14: // aFormalParameterRest ::= COMA formalParameterList 
            {
                AFormalParameterRest RESULT = null;
                int fplleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int fplright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                FormalParameterList fpl = (FormalParameterList) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new AFormalParameterRest(fpl);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("aFormalParameterRest", 14, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 13: // aFormalParameter ::= type myIDENTIFIER 
            {
                AFormalParameter RESULT = null;
                int tleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int tright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                Type t = (Type) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                int idleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int idright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                Symbol ident = new Symbol(sym.myIDENTIFIER, idleft, idright, id);
                RESULT = new AFormalParameter(t, ident);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("aFormalParameter", 13, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 12: // formalParameterList ::= formalParameterList aFormalParameterRest 
            {
                FormalParameterList RESULT = null;
                int fplleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int fplright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                FormalParameterList fpl = (FormalParameterList) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                int fprleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int fprright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                AFormalParameterRest fpr = (AFormalParameterRest) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new AFormalParameterListRest(fpl, fpr);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("formalParameterList", 12, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 11: // formalParameterList ::= aFormalParameter 
            {
                FormalParameterList RESULT = null;
                int fpleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int fpright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                AFormalParameter fp = (AFormalParameter) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new AFormalParameterList(fp);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("formalParameterList", 12, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 10: // aMethodDeclaration ::= PUBLIC type myIDENTIFIER PARENi aFormalParameterBlock PARENd LLAVEi aVarDecl aStatementList RETURN expression PUNTOyCOMA LLAVEd 
            {
                AMethodDeclaration RESULT = null;
                int tleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 11)).left;
                int tright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 11)).right;
                Type t = (Type) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 11)).value;
                int idleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 10)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 10)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 10)).value;
                int fpbleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 8)).left;
                int fpbright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 8)).right;
                AFormalParameterBlock fpb = (AFormalParameterBlock) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 8)).value;
                int vdleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).left;
                int vdright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).right;
                AVarDecl vd = (AVarDecl) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).value;
                int slleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).left;
                int slright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).right;
                AStatementList sl = (AStatementList) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).value;
                int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;

                Symbol ident = new Symbol(sym.myIDENTIFIER, idleft, idright, id);
                RESULT = new AMethodDeclaration(t, ident, fpb, vd, sl, e);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("aMethodDeclaration", 9, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 12)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 9: // aVarDeclaration ::= type myIDENTIFIER PUNTOyCOMA 
            {
                AVarDeclaration RESULT = null;
                int tleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int tright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                Type t = (Type) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                int idleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;

                Symbol ident = new Symbol(sym.myIDENTIFIER, idleft, idright, id);
                RESULT = new AVarDeclaration(t, ident);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("aVarDeclaration", 8, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 8: // classExtendsDeclaration ::= CLASS myIDENTIFIER EXTENDS myIDENTIFIER LLAVEi aVarDecl aMethodDecl LLAVEd 
            {
                AClassExtendsDeclaration RESULT = null;
                int id1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 6)).left;
                int id1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 6)).right;
                String id1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 6)).value;
                int id2left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).left;
                int id2right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).right;
                String id2 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).value;
                int vdleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int vdright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                AVarDecl vd = (AVarDecl) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                int mdleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int mdright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                AMethodDecl md = (AMethodDecl) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;

                Symbol ident1 = new Symbol(sym.myIDENTIFIER, id1left, id1right, id1);
                Symbol ident2 = new Symbol(sym.myIDENTIFIER, id2left, id2right, id2);
                RESULT = new AClassExtendsDeclaration(ident1, ident2, vd, md);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("classExtendsDeclaration", 7, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 7)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 7: // aClassDeclaration ::= CLASS myIDENTIFIER LLAVEi aVarDecl aMethodDecl LLAVEd 
            {
                AClassDeclaration RESULT = null;
                int idleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).value;
                int vdleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int vdright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                AVarDecl vd = (AVarDecl) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                int mdleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int mdright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                AMethodDecl md = (AMethodDecl) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;

                Symbol ident = new Symbol(sym.myIDENTIFIER, idleft, idright, id);
                RESULT = new AClassDeclaration(ident, vd, md);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("aClassDeclaration", 4, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 6: // typeDeclaration ::= classExtendsDeclaration 
            {
                TypeDeclaration RESULT = null;
                int cedleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int cedright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                AClassExtendsDeclaration ced = (AClassExtendsDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new ATypeClassExtendsDeclaration(ced);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("typeDeclaration", 2, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 5: // typeDeclaration ::= aClassDeclaration 
            {
                TypeDeclaration RESULT = null;
                int cdleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int cdright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                AClassDeclaration cd = (AClassDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new ATypeClassDeclaration(cd);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("typeDeclaration", 2, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 4: // mainClass ::= CLASS myIDENTIFIER LLAVEi PUBLIC STATIC VOID MAIN PARENi STRING CORCHETEi CORCHETEd myIDENTIFIER PARENd LLAVEi aPrintStatement LLAVEd LLAVEd 
            {
                AMainClass RESULT = null;
                int id1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 15)).left;
                int id1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 15)).right;
                String id1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 15)).value;
                int id2left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).left;
                int id2right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).right;
                String id2 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).value;
                int psleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int psright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                APrintStatement ps = (APrintStatement) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;

                Symbol ident1 = new Symbol(sym.myIDENTIFIER, id1left, id1right, id1);
                Symbol ident2 = new Symbol(sym.myIDENTIFIER, id2left, id2right, id2);
                RESULT = new AMainClass(ident1, ident2, ps);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("mainClass", 3, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 16)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 3: // aTypeDecl ::= 
            {
                ATypeDecl RESULT = null;

                RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("aTypeDecl", 1, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 2: // aTypeDecl ::= aTypeDecl typeDeclaration 
            {
                ATypeDecl RESULT = null;
                int tdleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int tdright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                ATypeDecl td = (ATypeDecl) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                int tdeclleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int tdeclright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                TypeDeclaration tdecl = (TypeDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = new ATypeDecl(td, tdecl);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("aTypeDecl", 1, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 1: // aGoal ::= mainClass aTypeDecl 
            {
                AGoal RESULT = null;
                int mcleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int mcright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                AMainClass mc = (AMainClass) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                int tdleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int tdright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ATypeDecl td = (ATypeDecl) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                parser.raiz = new AGoal(mc, td);

                CUP$parser$result = parser.getSymbolFactory().newSymbol("aGoal", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*
             * . . . . . . . . . . . . . . . . . . . .
             */
            case 0: // $START ::= aGoal EOF 
            {
                Object RESULT = null;
                int start_valleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int start_valright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                AGoal start_val = (AGoal) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                RESULT = start_val;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("$START", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            /*
             * ACCEPT
             */
            CUP$parser$parser.done_parsing();
            return CUP$parser$result;

            /*
             * . . . . . .
             */
            default:
                throw new Exception(
                        "Invalid action number found in internal parse table");

        }
    }
}
